import os
import re
import shutil

# C·∫•u h√¨nh t√™n c≈© v√† t√™n m·ªõi
OLD_NAME = "stable_diffusion_HVCN"
NEW_NAME = "stablediffusionHVCN"

# C√°c th∆∞ m·ª•c/file c·∫ßn rename trong local
TARGETS = [
    "stable_diffusion_HVCN",
    "stable_diffusion_HVCN/DATA_GITHUB",
    "stable_diffusion_HVCN/HVCN_LoRA_Universe",
    "stable_diffusion_HVCN/sync_drive_to_repo.py"
]

# ƒê·ªïi t√™n folder v√† file
for path in TARGETS:
    if os.path.exists(path):
        new_path = path.replace(OLD_NAME, NEW_NAME)
        print(f"ƒê·ªïi: {path} -> {new_path}")
        os.rename(path, new_path)

# Duy·ªát th∆∞ m·ª•c v√† ƒë·ªïi t√™n trong n·ªôi dung file
def replace_content_recursive(folder, old_text, new_text):
    for root, _, files in os.walk(folder):
        for file in files:
            if file.endswith((".py", ".json", ".md", ".ipynb")):
                filepath = os.path.join(root, file)
                with open(filepath, "r", encoding="utf-8") as f:
                    content = f.read()
                updated = content.replace(old_text, new_text)
                with open(filepath, "w", encoding="utf-8") as f:
                    f.write(updated)
                print(f"‚úÖ ƒê√£ s·ª≠a n·ªôi dung: {filepath}")

# S·ª≠a n·ªôi dung trong to√†n b·ªô project
replace_content_recursive(NEW_NAME, OLD_NAME, NEW_NAME)

# C·∫≠p nh·∫≠t remote git (n·∫øu c·∫ßn)
repo_path = os.path.join(NEW_NAME, "HVCN_LoRA_Universe")
if os.path.exists(repo_path):
    os.chdir(repo_path)
    os.system("git remote set-url origin https://github.com/Hoangnguyen010/stablediffusionHVCN.git")
else:
    print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c Git repo ƒë·ªÉ c·∫≠p nh·∫≠t remote.")

print("\nüéØ Ho√†n t·∫•t rename to√†n b·ªô h·ªá th·ªëng v√† ƒë·ªìng b·ªô n·ªôi dung!")
